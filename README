        Linux kernel code for <奔跑吧Linux内核>


1. 目的：
    《奔跑吧linux内核》第6章里提供了一个使用QEMU来单步调试ARM32/ARM64的Linux内核的实验平台，但是默认内核编译的时候默认使用“-02”的GCC编译优化选项，
    那么导致在QUMU+GDB调试环境中出现光标乱跳以及无法打印有些变量的值等问题。本git tree就是为了解决该问题，在Makefile中修改GCC的优化选项为“-O0”。
    本git tree仅仅是为了提供一个好用的单步调试环境，不适用于其他用途。
    
    另外还内置了编译好的busybox小文件系统，方便读者快速编译和调试内核。
    
    git tree中上传了《奔跑吧Linux内核》第6章关于QEMU+GDB+eclipse调试内核的样章。


2. 使用方法：
   本实验是在Ubuntu 16.04上完成的，使用其他版本的Linux发行版遇到编译问题请自行解决了。
   
   $ sudo apt-get install qemu libncurses5-dev gcc-arm-linux-gnueabi build-essential gdb-arm-none-eabi gcc-aarch64-linux-gnu eclipse-cdt
   
   编译ARM32内核：
   $ export ARCH=arm
   $ export CROSS_COMPILE=arm-linux-gnueabi-
   $ make vexpress_defconfig
   $ make bzImage –j4 
   $ make dtbs
   
   运行ARM32内核：
   $ qemu-system-arm -M vexpress-a9 -smp 4 -m 1024M -kernel arch/arm/boot/zImage  -append "rdinit=/linuxrc console=ttyAMA0 loglevel=8" 
       -dtb arch/arm/boot/dts/vexpress-v2p-ca9.dtb -nographic
   
   编译ARM64内核：
   $ export ARCH=arm64
   $ export CROSS_COMPILE= aarch64-linux-gnu-
   $ make defconfig
   $ make –j4 
   
   运行ARM64内核：
   $ qemu-system-aarch64 -machine virt -cpu cortex-a57 -machine type=virt -nographic -m 2048 –smp 2
      -kernel arch/arm64/boot/Image --append "rdinit=/linuxrc console=ttyAMA0"
      
   调试内核请见pdf文档。



    
 
